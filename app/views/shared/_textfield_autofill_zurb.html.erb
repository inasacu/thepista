= stylesheet_link_tag 'jquery-ui/themes/base/jquery.ui.all'
= javascript_include_tag "jquery-ui/ui/jquery.ui.core"
= javascript_include_tag "jquery-ui/ui/jquery.ui.widget"
= javascript_include_tag "jquery-ui/ui/jquery.ui.position"
= javascript_include_tag "jquery-ui/ui/jquery.ui.menu"
= javascript_include_tag "jquery-ui/ui/jquery.ui.autocomplete"
:javascript
  $(function() {
  	var availableTags = [];
  <haml:silent>	 
  		counter = -1
  		@items.each do |item| 
  	
  </haml:silent><haml:block>		availableTags[#{counter+=1}] = "#{item.name}";
  </haml:block>	
  	function split( val ) {
  		return val.split( /,\s*/ );
  	}
  	function extractLast( term ) {
  		return split( term ).pop();
  	}
  
  	$( "#autofill" )
  		// don't navigate away from the field on tab when selecting an item
  		.bind( "keydown", function( event ) {
  			if ( event.keyCode === $.ui.keyCode.TAB &&
  					$( this ).data( "autocomplete" ).menu.active ) {
  				event.preventDefault();
  			}
  		})
  		.autocomplete({
  			minLength: 0,
  			source: function( request, response ) {
  				// delegate back to autocomplete, but extract the last term
  				response( $.ui.autocomplete.filter(
  					availableTags, extractLast( request.term ) ) );
  			},
  			focus: function() {
  				// prevent value inserted on focus
  				return false;
  			},
  			select: function( event, ui ) {
  				var terms = split( this.value );
  				// remove the current input
  				terms.pop();
  				// add the selected item
  				terms.push( ui.item.value );
  				// add placeholder to get the comma-and-space at the end
  				terms.push( "" );
  				this.value = terms.join( ", " );
  				return false;
  			}
  		});
  });
