<%= render 'utilities/calendar_script' %>
	
<%

	days_in_a_week = 7
	the_current_date = Time.zone.now 
	the_previous_date = the_current_date - 1.month
	the_next_date = the_current_date + 1.month

	the_current_nice_month_year = nice_month_year(the_current_date)
	the_previous_nice_month_year = nice_month_year(the_previous_date)
	the_next_nice_month_year = nice_month_year(the_next_date)

	the_previous_nice_month = nice_month_full(the_previous_date)
	the_next_nice_month = nice_month_full(the_next_date)

	# the_trace_date = the_current_date.at_beginning_of_month 

	the_current_day_number = the_current_date.day

	the_firstday_of_month = 1

	the_first_weekday_of_month = the_current_date.at_beginning_of_month.wday
	the_first_weekday_of_month = days_in_a_week if the_first_weekday_of_month == 0

	blankdays_first_week = the_first_weekday_of_month - 1
	@day_of_month_counter = the_firstday_of_month
	
	first_week_blank_day_counter = blankdays_first_week
	
	
	the_last_day_of_month = days_in_month(the_current_date.month)
	
	the_last_weekday_of_month = the_current_date.at_end_of_month.wday
	the_last_weekday_of_month = days_in_a_week if the_last_weekday_of_month == 0
	
	blank_days_last_week = days_in_a_week - the_last_weekday_of_month
	last_week_blank_day_counter = the_last_day_of_month - (days_in_a_week - blank_days_last_week) + 1

	is_same_day = false
	is_last_blank_days = true

	a_strong_open = "<strong>"
	a_strong_close = "</strong>"

	all_weekday_numbers = [1,2,3,4,5,6,7]
	the_month = []
	the_week = []

	the_blankday_value = "&nbsp;"
	the_color_value = ""
	the_color_class = ""
	the_color_details = ""

	the_day_html = "<div class=\"day\">"
	the_day_bar_html = "<div class=\"daybar\">"
	the_dot_html = "<div class=\"dots\">" 
	the_open_html = "<div class=\"open\">"
	the_yellow_html = "<li class=\"yellow\"></li>"
	the_green_html = "<li class=\"green\"></li>"
	the_blue_html = "<li class=\"blue\"></li>"
	the_red_html = "<li class=\"red\"></li>"

	the_div_close_html = "</div>"

	@my_schedules = Schedule.find(:all, 
			:conditions => ["schedules.archive = false and starts_at >= ? and ends_at <= ? and group_id in (select group_id from groups_users where user_id = ?)", 
				Time.zone.now.at_beginning_of_month,
				Time.zone.now.at_end_of_month, current_user],:order => 'starts_at')
				
	total_schedules = 0
	@my_schedules.each {|x| total_schedules += 1}	
	
	# first blank days of the month
	blankdays_first_week.times.each do |x|
		the_blankday_value = "&nbsp;"
		the_week << get_the_blankday_html(the_blankday_value) #if blankdays_first_week > 0
	end
	
	
	the_color_class = "green"
	the_event_length = 1
	the_event_padding = 1
	the_event_dot_color = ""
	the_event_open_color = ""
	the_day_class = "day"
	# get_the_event_day_html(the_day_value, get_the_event_dot_color(the_color_class), get_the_event_open_color(the_color_class, the_event_length, the_event_padding, the_event_details))
	
	
%>

<%		
	
	# first week
	(first_week_blank_day_counter...days_in_a_week).each do |x|	

		@my_schedules.each do |schedule|
			
			unless is_same_day
				is_same_day = (@day_of_month_counter == the_current_day_number) 
				is_same_link_date = (@day_of_month_counter == schedule.starts_at.day) 
			end

			the_day_class = "day today big" if is_same_day
			the_schedule = "#{nice_simple_time_at(schedule.starts_at)}  #{item_name_link(schedule)}"
		
			if is_same_link_date				
				the_event_dot_color = "#{the_event_dot_color} #{get_the_event_dot_color(the_color_class)}"
				the_event_open_color = "#{the_event_open_color} #{get_the_event_open_color(the_color_class, the_event_length, the_event_padding, the_schedule)}"
			end	
			
			
		end
				
		the_week << get_the_event_day_html(the_day_class, @day_of_month_counter, the_event_dot_color, the_event_open_color)	
		@day_of_month_counter+=1	
		is_same_day = false	
		the_event_dot_color = ""
		the_event_open_color = ""
		the_day_class = "day"	
		
	end
	the_month << the_week
	
	# reinitialize values
	the_week = [] 
	
	# middle weeks	
	while (@day_of_month_counter < last_week_blank_day_counter)
			
			@my_schedules.each do |schedule|
			
				days_in_a_week.times.each do |x|

					unless is_same_day
						is_same_day = (@day_of_month_counter == the_current_day_number) 
						is_same_link_date = (@day_of_month_counter == schedule.starts_at.day) 
					end

					the_day_class = "day today big" if is_same_day
					the_schedule = "#{nice_simple_time_at(schedule.starts_at)}  #{item_name_link(schedule)}"

					if is_same_link_date				
						the_event_dot_color = "#{the_event_dot_color} #{get_the_event_dot_color(the_color_class)}"
						the_event_open_color = "#{the_event_open_color} #{get_the_event_open_color(the_color_class, the_event_length, the_event_padding, the_schedule)}"
					end


					the_week << get_the_event_day_html(the_day_class, @day_of_month_counter, the_event_dot_color, the_event_open_color)	if (@day_of_month_counter < last_week_blank_day_counter)
					@day_of_month_counter+=1	
					is_same_day = false
					the_event_dot_color = ""
					the_event_open_color = ""
					the_day_class = "day"
				
				end
				
				the_month << the_week		
				# reinitialize values
				the_week = []
				
			end
			
	end	
	
	@day_of_month_counter = last_week_blank_day_counter
	# last week
	(last_week_blank_day_counter..the_last_day_of_month).each do |x|	

		@my_schedules.each do |schedule|
			
			unless is_same_day
				is_same_day = (@day_of_month_counter == the_current_day_number) 
				is_same_link_date = (@day_of_month_counter == schedule.starts_at.day) 
			end

			the_day_class = "day today big" if is_same_day
			the_schedule = "#{nice_simple_time_at(schedule.starts_at)}  #{item_name_link(schedule)}"
		
			if is_same_link_date				
				the_event_dot_color = "#{the_event_dot_color} #{get_the_event_dot_color(the_color_class)}"
				the_event_open_color = "#{the_event_open_color} #{get_the_event_open_color(the_color_class, the_event_length, the_event_padding, the_schedule)}"
			end	
			
			
		end
				
		the_week << get_the_event_day_html(the_day_class, @day_of_month_counter, the_event_dot_color, the_event_open_color)	
		@day_of_month_counter+=1	
		is_same_day = false
		
	end
	
	# last blank days of the month
	blank_days_last_week.times.each do |x|
		the_blankday_value = "&nbsp;"
		the_week << get_the_blankday_html(the_blankday_value) 
	end	
	the_month << the_week

%>


<div id="calendar">	
					
	<div id="calcontainer">
		
		<div id="calheader">
			<caption><%= set_title_class(the_current_nice_month_year) %></caption>
		</div>	
		
		<hr/>	
		

		<div id="daysweek">
			<div class="dayweek"><p><%= label_name(:monday) %></p></div>
			<div class="dayweek"><p><%= label_name(:tuesday) %></p></div>
			<div class="dayweek"><p><%= label_name(:wednesday) %></p></div>
			<div class="dayweek"><p><%= label_name(:thursday) %></p></div>
			<div class="dayweek"><p><%= label_name(:friday) %></p></div>
			<div class="dayweek"><p><%= label_name(:saturday) %></p></div>
			<div class="dayweek brn"><p><%= label_name(:sunday) %></p></div>
		</div>
		
		<div id="daysmonth">
			
				<% counter = 0 %>
				<% the_month.each do |week| %>
				
					<%= "<!---------------------------------------- week #{counter +=1} ---------------------------------------->".html_safe %>
					<div class="week">
						<% week.each do |day| %>
						<%= "#{day}".html_safe %>
						<% end %>
					</div>
					<%= "<!---------------------------------------- week #{counter} end ---------------------------------------->".html_safe %>
					
					<div class="week"></div>
					
				<% end %>
		
		</div>
			
		<hr/>		
				
	</div>					
	<div id="calcat">
		<div class="caldot green"></div><p>Futbol</p>
		<div class="caldot yellow"></div><p>Padel</p>
		<div class="caldot blue"></div><p>Tennis</p>
		<div class="caldot red"></div><p>Volleyball</p>
	</div>
	
</div>

