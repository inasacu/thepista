<%= render 'utilities/calendar_script' %>
	
<%

	days_in_a_week = 7

	# block_token = Base64::encode64(@current_user_zone.to_i.to_s)
	
	
	is_holiday = nil
	the_day_starts_at = nil
	the_day_ends_at = nil
	the_time_frame = nil

	
	
	the_previous_date = @current_user_zone - 1.month
	the_next_date = @current_user_zone + 1.month
	
	@first_day = @current_user_zone.at_beginning_of_month
	@last_day = @current_user_zone.at_end_of_month
	
	@the_day_of_month = @first_day
	
	the_real_nice_month_year = nice_month_year(Time.zone.now)
	the_current_nice_month_year = nice_month_year(@current_user_zone)
	
	the_previous_nice_month_year = nice_month_year(the_previous_date)
	the_next_nice_month_year = nice_month_year(the_next_date)

	the_previous_nice_month = nice_month_full(the_previous_date)
	the_next_nice_month = nice_month_full(the_next_date)

	the_current_day_number = @current_user_zone.day

	the_firstday_of_month = 1

	the_first_weekday_of_month = @current_user_zone.at_beginning_of_month.wday
	the_first_weekday_of_month = days_in_a_week if the_first_weekday_of_month == 0

	blankdays_first_week = the_first_weekday_of_month - 1
	@day_of_month_counter = the_firstday_of_month
	
	first_week_blank_day_counter = blankdays_first_week
	
	
	the_last_day_of_month = days_in_month(@current_user_zone.month)
	
	the_last_weekday_of_month = @current_user_zone.at_end_of_month.wday
	the_last_weekday_of_month = days_in_a_week if the_last_weekday_of_month == 0
	
	blank_days_last_week = days_in_a_week - the_last_weekday_of_month
	last_week_blank_day_counter = the_last_day_of_month - (days_in_a_week - blank_days_last_week) + 1

	is_same_day = false
	is_last_blank_days = true


	all_weekday_numbers = [1,2,3,4,5,6,7]
	the_month = []
	the_week = []
	
	the_green_html = "<li class=\"green\"></li>"
	the_blue_html = "<li class=\"blue\"></li>"
	the_yellow_html = "<li class=\"yellow\"></li>"
	the_none_html = "<li class=\"none\"></li>"
	the_red_html = "<li class=\"red\"></li>"


	@the_schedules = Schedule.find(:all, 
			:conditions => ["schedules.archive = false and schedules.starts_at >= ? and schedules.ends_at <= ? and schedules.group_id in (select group_id from groups_users where user_id = ?)", 
				@first_day, @last_day, current_user],
			:order => 'starts_at')


	total_schedules = 0
	the_schedules_day_numbers = []
	
	@the_schedules.each do |schedule| 
		the_schedules_day_numbers << schedule.starts_at.day 
		total_schedules += 1
	end
	
	
	
	
	
	@the_reservations = Reservation.find(:all,
			:conditions => ["reservations.archive = false and reservations.starts_at >= ? and reservations.ends_at <= ?", @first_day, @last_day],:order => 'starts_at')
	
	@the_timetables = Timetable.find(:all, :select => "timetables.id, timetables.installation_id, timetables.starts_at, timetables.ends_at, timetables.timeframe, types.id, types.name",
			:joins => "join types on timetables.type_id = types.id",
			:conditions => ["timetables.installation_id = ? and timetables.type_id = types.id and types.table_type = 'Timetable'", @installation],
			:order => "timetables.type_id, timetables.starts_at")
				
	
	@the_holidays = Holiday.find(:all,
			:conditions => ["holidays.archive = false and holidays.starts_at >= ? and holidays.ends_at <= ?", @first_day, @last_day],:order => 'starts_at')
			
	has_month_holidays = false
	@the_holidays.each {|x| has_month_holidays = true}


	
	# show like to previous and next month
	the_previous_block = block_token = Base64::encode64(the_previous_date.to_i.to_s)
	the_next_block = block_token = Base64::encode64(the_next_date.to_i.to_s)
	
	the_previous_reservation_link = link_to(the_previous_nice_month_year, reservations_path(:id => @installation, :block_token => the_previous_block))
	the_next_reservation_link = link_to(the_next_nice_month_year, reservations_path(:id => @installation, :block_token => the_next_block))
	
	
	
	# first blank days of the month
	blankdays_first_week.times.each do |x|
		the_blankday_value = "&nbsp;"
		the_week << get_the_blankday_html(the_blankday_value) 
	end
	
	
	the_day_is_today = "day today"
	the_color_class = "green"
	the_event_length = 1
	the_event_padding = 1
	the_event_dot_color = ""
	the_event_open_color = ""
	the_day_class = "day"	
	
	is_same_schedule_date = false
	is_same_month_year = (the_real_nice_month_year == the_current_nice_month_year)
	
	# first week
	(first_week_blank_day_counter...days_in_a_week).each do |x|	

		# unless is_same_day
		# 	is_same_day = (@day_of_month_counter == the_current_day_number and is_same_month_year) 
		# 	is_same_schedule_date = the_schedules_day_numbers.include?(@day_of_month_counter)					
		# end
		# 
		# the_day_class = the_day_is_today if is_same_day
		# 
		# 
		# if is_same_schedule_date				
		# 	
		# 	the_actual_schedule = nil
		# 	@the_schedules.each {|schedule| the_actual_schedule = schedule}
		# 	
		# 	the_schedule = ""
		# 	the_schedule = "#{nice_simple_time_at(the_actual_schedule.starts_at)}  #{item_name_link(the_actual_schedule)}"
		# 	
		# 	the_event_dot_color = "#{the_event_dot_color} #{get_the_event_dot_color(the_color_class)}"
		# 	the_event_open_color = "#{the_event_open_color} #{get_the_event_open_color(the_color_class, the_event_length, the_event_padding, the_schedule)}"
		# end
		
		the_day_class, the_event_dot_color, the_event_open_color, the_week = 
				get_the_event_html(is_same_day, @day_of_month_counter, the_current_day_number, is_same_month_year, the_schedules_day_numbers, the_day_class, @the_schedules, the_week)

				
		# the_week << get_the_event_day_html(the_day_class, @day_of_month_counter, the_event_dot_color, the_event_open_color)	
		# @day_of_month_counter+=1
		# @the_day_of_month += 1.day	
		# is_same_day = false	
		# the_event_dot_color = ""
		# the_event_open_color = ""
		# the_day_class = "day"	
		
	end
	the_month << the_week
	the_week = [] 
	
	# middle weeks	
	while (@day_of_month_counter < last_week_blank_day_counter)
			
			
		days_in_a_week.times.each do |x|
			
			is_less_than_day = (@day_of_month_counter < last_week_blank_day_counter)
			
			# unless is_same_day
			# 	is_same_day = (@day_of_month_counter == the_current_day_number and is_same_month_year) 
			# 	is_same_schedule_date = the_schedules_day_numbers.include?(@day_of_month_counter)					
			# end
			# 
			# the_day_class = the_day_is_today if is_same_day
			# 
			# 
			# if is_same_schedule_date				
			# 
			# 	the_actual_schedule = nil
			# 	@the_schedules.each {|schedule| the_actual_schedule = schedule}
			# 
			# 	the_schedule = ""
			# 	the_schedule = "#{nice_simple_time_at(the_actual_schedule.starts_at)}  #{item_name_link(the_actual_schedule)}"
			# 
			# 	the_event_dot_color = "#{the_event_dot_color} #{get_the_event_dot_color(the_color_class)}"
			# 	the_event_open_color = "#{the_event_open_color} #{get_the_event_open_color(the_color_class, the_event_length, the_event_padding, the_schedule)}"
			# end

			the_day_class, the_event_dot_color, the_event_open_color, the_week = 
					get_the_event_html(is_same_day, @day_of_month_counter, the_current_day_number, is_same_month_year, the_schedules_day_numbers, the_day_class, @the_schedules, the_week, is_less_than_day)

			# the_week << get_the_event_day_html(the_day_class, @day_of_month_counter, the_event_dot_color, the_event_open_color)	if (@day_of_month_counter < last_week_blank_day_counter)
			# @day_of_month_counter+=1	
			# @the_day_of_month += 1.day
			# is_same_day = false
			# the_event_dot_color = ""
			# the_event_open_color = ""
			# the_day_class = "day"
		
		end
		
		the_month << the_week
		the_week = []
			
	end	
	
	@day_of_month_counter = last_week_blank_day_counter
	# last week
	(last_week_blank_day_counter..the_last_day_of_month).each do |x|	

		# unless is_same_day
		# 	is_same_day = (@day_of_month_counter == the_current_day_number and is_same_month_year) 
		# 	is_same_schedule_date = the_schedules_day_numbers.include?(@day_of_month_counter)					
		# end
		# 
		# the_day_class = the_day_is_today if is_same_day
		# 
		# 
		# if is_same_schedule_date				
		# 	
		# 	the_actual_schedule = nil
		# 	@the_schedules.each {|schedule| the_actual_schedule = schedule}
		# 	
		# 	the_schedule = ""
		# 	the_schedule = "#{nice_simple_time_at(the_actual_schedule.starts_at)}  #{item_name_link(the_actual_schedule)}"
		# 	
		# 	the_event_dot_color = "#{the_event_dot_color} #{get_the_event_dot_color(the_color_class)}"
		# 	the_event_open_color = "#{the_event_open_color} #{get_the_event_open_color(the_color_class, the_event_length, the_event_padding, the_schedule)}"
		# end
				
		the_day_class, the_event_dot_color, the_event_open_color, the_week = 
				get_the_event_html(is_same_day, @day_of_month_counter, the_current_day_number, is_same_month_year, the_schedules_day_numbers, the_day_class, @the_schedules, the_week)	
				
		# the_week << get_the_event_day_html(the_day_class, @day_of_month_counter, the_event_dot_color, the_event_open_color)	
		# @day_of_month_counter+=1	
		# @the_day_of_month += 1.day
		# is_same_day = false
		# the_event_dot_color = ""
		# the_event_open_color = ""
		# the_day_class = "day" 
		
	end
	
	# last blank days of the month
	blank_days_last_week.times.each do |x|
		the_blankday_value = "&nbsp;"
		the_week << get_the_blankday_html(the_blankday_value) 
	end	
	the_month << the_week

%>

<%= render 'reservations/reservation_calendar_zurb', 
	:the_previous_reservation_link => the_previous_reservation_link, :the_next_reservation_link => the_next_reservation_link,
	:the_current_nice_month_year => the_current_nice_month_year, :the_month => the_month %>







	<br/>


		
		<% @the_day_of_month = @first_day %>
		
		<hr/>
		SCHEDULES
		<br/>
		<% @the_schedules.each do |item| %>
			<%= "#{item.class.to_s}:  #{item.name} - #{item.starts_at} : #{item.ends_at} " %><br/>
			
			
		<% end %>
		<hr/>
		<br/>

		RESERVATIONS
		<br/>
		<% @the_reservations.each do |item| %>
			<%= "#{item.class.to_s}:  #{item.name} - #{item.starts_at} : #{item.ends_at} " %><br/>
			
		<% end %>
		<hr/>
		<br/>

		<% if has_month_holidays %>

			HOLIDAYS
			<br/>
			<% @the_holidays.each do |item| %>
				<%= "#{item.class.to_s}:  #{item.name} - #{nice_simple_time_at(item.starts_at)} : #{nice_simple_time_at(item.ends_at)} " %>
				
				
				<% if item.starts_at == convert_to_datetime_zone(@the_day_of_month, item.starts_at)
						is_holiday = true
						holiday_hour = item.holiday_hour
					end 
				%>
				
								
			
			<% end %>
			<hr/>
			<br/>
		
		<% end %>

		TIMETABLES
		<br/>
		
		
			<% @the_timetables.each do |item| %>
				
				<%= "#{item.class.to_s}:  #{item.name} - #{nice_simple_time_at(item.starts_at)} : #{nice_simple_time_at(item.ends_at)} " %>
			
				<% 
					the_day_starts_at = convert_to_datetime_zone(@the_day_of_month, item.starts_at)
					the_day_ends_at = convert_to_datetime_zone(@the_day_of_month.midnight, item.ends_at)
					the_time_frame = item.timeframe.hour			
				%>
			
				<%= ["#{nice_simple_time_at(the_day_starts_at)} * #{nice_simple_time_at(the_day_ends_at)} * #{the_time_frame}"] %><br/><br/>
				
			
		
			<% end %>
			<hr/>
			<br/>
		
				

