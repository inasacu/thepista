<% 
	counter = 0 
	roster_count = (object_counter(the_roster) > 0)

	type_id = [1, 4]
	
	home = {}
	away = {}
	technical = {}
	physical = {}
		
	is_manager ||= false
	show_deviation ||= false
	show_position ||= true
	show_mean ||= true
		
	home["defense"] = 0.0
	home["center"] = 0.0
	home["attack"] = 0.0
	home["technical"] = 0.0
	home["physical"] = 0.0
	home["total"] = 0.0
	home["mean"] = 0.0
	home["deviation"] = 0.0
	home["level"] = 0.0
	home["total_skill"] = 0.0
	home["players"] = 0
	
	away["defense"] = 0.0
	away["center"] = 0.0
	away["attack"] = 0.0
	away["technical"] = 0.0
	away["physical"] = 0.0
	away["total"] = 0.0
	away["mean"] = 0.0
	away["deviation"] = 0.0
	away["level"] = 0.0
	away["total_skill"] = 0.0
	away["players"] = 0
	
	group = @schedule.group
	is_manager = current_user.is_manager_of?(group)
	
	is_squad = get_the_action.gsub(' ','_') == 'team_roster'
	group_games_played = @schedule.group.games_played.to_f
	
	@positions = Type.find(:all, :conditions => "table_type = 'User'", :order => "id")
	
	schedule_number = Schedule.schedule_number(schedule)  
	
	first_schedule = @schedule.group.schedules.first
	has_been_played = @schedule.played? 	
	is_sub_manager = !has_been_played
	has_been_played_squad = has_been_played and is_squad
	
	show_right_border = true
	if is_squad
		show_right_border = true 
	elsif !is_squad
		show_right_border = false unless is_manager
	end
	
	show_right_evaluation = is_manager
	show_right_evaluation = true if (!is_manager and has_been_played)
	
	the_trueskill_label = get_cluetip(label_name(:true_skill_mean_initial), 'info', label_name('true_skill_mean_cluetip'))
	the_trueskill_label_final = get_cluetip(label_name(:true_skill_mean_final), 'info', label_name('true_skill_mean_cluetip'))
		
if roster_count 
%>
      <%= get_class_table_id_action %>
	  
		<tr>
			<%= content_tag :th, "&nbsp;", :class => "first" %>
			<%= content_tag :th, "&nbsp;", :class => "heading" %>			
			<%= content_tag :th, (is_squad and !has_been_played) ? "#{label_name(:name)}<br/>#{sort_link(label_name(:change_at), :status_at)}" :
			 													   "#{label_name(:name)}", :title => label_name(:change_at_full), :class => "heading" %>
			<%= content_tag :th, label_name(:position), :title => label_name(:position), :class => "heading", :align => "center" if show_position %>
			<%= content_tag :th, label_name(:technical), :title => label_name(:profile_technical), :class => "heading" %>
			<%= content_tag :th, label_name(:physical), :title => label_name(:profile_physical), :class => "heading" %>
			<%= content_tag :th, label_name(:games_played_full_2), :class => "heading" %>
			<%= content_tag :th, the_trueskill_label, :class => "heading_#{show_right_border}" %>
			<%= content_tag :th, the_trueskill_label_final, :class => "heading" if has_been_played and is_squad %>
			<%= content_tag :th, has_been_played ? "" : is_squad ? sort_link(label_name(:group), :group_id) : 
							label_name(:group), :class => "heading_#{show_right_evaluation}" if is_squad and !has_been_played %>		
			<% if has_been_played %>
			<%= content_tag :th, label_name(:score), :class => "last_roster" if is_squad %>
			<% elsif !has_been_played and is_manager %>
			<%= content_tag :th, "", :class => "last_roster" %>
			<% end -%>
		</tr>
<% 
the_roster.each do |match| 
	
	the_user = match.user
	
	if match.type_id == 1
		is_second_team = !(match.group_id > 0)

		home["players"] += 1 unless is_second_team
		away["players"] += 1 if is_second_team
	end

	second_team = ""
	second_team = "second_team" if is_second_team

	puntos = "puntos"
	puntos = "second_team_puntos" if is_second_team

	name_and_date = "name_and_date"
	name_and_date = "name_and_date_second_team" if is_second_team

	last_roster = "last"
	last_roster = "second_team_last_roster" if is_second_team

	coeficient_played = 100 *(match.scorecard_played.to_f / group_games_played)
	previous_user_match = Match.get_previous_user_match(match, schedule_number, group)
	the_user_match = Match.get_rating_average(match, group)

	rating_technical = the_user_match.rating_average_technical.to_f
	rating_physical = the_user_match.rating_average_physical.to_f

    initial_mean = (InitialMean).to_f
    initial_deviation = (InitialMean / K_FACTOR).to_f 
	final_mean = 0.0
	final_deviation = 0.0
	game_number = 1

	unless previous_user_match.nil?
		initial_mean = previous_user_match.final_mean 
		initial_deviation = previous_user_match.final_deviation
		game_number = previous_user_match.game_number
	end

	if has_been_played
		initial_mean = match.initial_mean 
		initial_deviation = match.initial_deviation
		final_mean = match.final_mean 
		final_deviation = match.final_deviation
	end

	is_subscriber = the_user.is_subscriber_of?(group)	
	the_label =  label_name("subscription_#{is_subscriber}")

	if is_squad
		# initialize values if nil
		rating_technical = 0.0  if rating_technical.nil?
		rating_physical = 0.0  if rating_physical.nil?		
		initial_mean = 0.0  if initial_mean.nil?
		initial_deviation = 0.0  if initial_deviation.nil?
				
		case match.position.name
		when "defense"
			(match.group_id > 0) ? home["defense"] += 1 : away["defense"] += 1
		when "center"
			(match.group_id > 0) ? home["center"] += 1 : away["center"] += 1
		when "attack"
			(match.group_id > 0) ? home["attack"] += 1 : away["attack"] += 1
		end

		(match.group_id > 0) ? home["technical"] += rating_technical : away["technical"] += rating_technical
		(match.group_id > 0) ? home["physical"] += rating_physical : away["physical"] += rating_physical
		(match.group_id > 0) ? home["total"] += 1 : away["total"] += 1

		(match.group_id > 0) ? home["mean"] += initial_mean : away["mean"] += initial_mean
		(match.group_id > 0) ? home["deviation"] += initial_deviation : away["deviation"] += initial_deviation
	end

	@roster = match	
	can_evaluate = current_user != the_user and the_roster.include?(current_user)
	was_convocado =  match.type_id == 1	
-%>
<tr>
	<td class="<%= second_team %>" ><%= image_link_smaller the_user %></td>

	<td class="<%= second_team %>" >
		<%= subscription_image_link(the_user, is_subscriber, the_label) %>&nbsp;&nbsp;&nbsp;<%= counter +=1 %>.
	</td>

	<td class="<%= name_and_date %>">
		<%= user_link_limit the_user %>
		<span class="date_tiny">
		<%= "#{ago(match.status_at)}" unless has_been_played %>
		<%= "<br />( #{label_name(:no_jugado)} )" if match.type_id == 4 %>
		</span>
	</td>

	<%= content_tag(:td, match.position_name, :class => second_team) if show_position %>
	<%= content_tag(:td, rating_technical, :class => second_team) %>
	<%= content_tag(:td, rating_physical, :class => second_team) %>
	<%= content_tag(:td, game_number, :class => second_team) %>
	<%= content_tag(:td, "#{sprintf( "%.2f", initial_mean)}", :class => second_team) %>
	<%= content_tag(:td, "#{sprintf( "%.2f", final_mean)}", :class => second_team) if has_been_played and is_squad %>
	
	<% if is_squad %>
	<% if !has_been_played  %>
	<td class="<%= second_team %>" >

		<% if has_been_played %>
		<% else %>
			<%= is_sub_manager ? link_to(match.team_name(@schedule), 
								match_team_path(:id => match.id), :title => label_name(:change_group)) :  match.team_name(@schedule) %>
		<% end -%>		
		
	</td>
<% 	
	end
	if has_been_played_squad
%>	
		<td class="<%= second_team %>" ><%= group_score_link @schedule if was_convocado %></td>
<%		
	end 
	end

if !has_been_played and is_manager
%>	
	<td class="<%= second_team %>" >
	<%= match_all_my_link(@schedule, the_user, true) if (current_user != the_user and is_manager) %>
	</td>
<% end %>
</tr>
<%
end 
%>
        
<% if is_squad %>
<%= render "schedules/team_skill", :home => home, :away => away, :is_manager => is_manager, :has_been_played => has_been_played,
 								:show_mean => show_mean, :show_position => show_position, :show_deviation => show_deviation %>
<% end %>

</table>

<% 
end
%>




















