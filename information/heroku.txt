
Deploying Multiple Environments on Heroku

http://jqr.github.com/2009/04/25/deploying-multiple-environments-on-heroku.html


heroku config:add RACK_ENV=staging --app thepista
heroku config:add RACK_ENV=production --app haypista


git push staging master
git push production master

heroku rake db:migrate --app thepista
heroku rake db:migrate --app haypista

heroku open --app thepista
heroku open --app haypista



Deploying Multiple Environments on Heroku

So you followed yesterday's guide on getting your application deployed to Heroku, and now you've fallen in love with it. Now you need to setup both a production and staging environment that you can easily deploy your application to.

So far Heroku only runs code in one branch, so we'll work around this by creating two remote repositories that we can push to.

For example simplicity, we'll be pushing all code out of the same git branch. You'll probably be pushing staging and production servers from different branches, adjust accordingly.
Create your servers and fix your remotes
Application names have to be unique on Heroku, so make sure to replace myapp with your application's name. You can do that automatically by clicking here.

heroku create haypista-staging --remote staging
heroku create haypista-production --remote production

Since we'll be pushing to two applications we are using the --remote argument to make two sensibly named remotes.
Environment specific variables

Heroku has a nice interface for setting up application specific settings, but I will assume your application configures itself according to the RAILS_ENV variable. Check out Heroku's docs if you need more control.

If you run your staging server in the production environment, you can skip this step.

heroku config:add RACK_ENV=staging --app haypista-staging
heroku config:add RACK_ENV=production --app haypista-production

Deploy and migrate

You'll be doing this next command pretty often. We push the current branch to the staging server's master branch. Since this is the first deploy we'll need to do the same thing for production and run all the migrations.

git push staging master
git push production master

heroku rake db:migrate --app haypista-staging
heroku rake db:migrate --app haypista-production

heroku open --app haypista-staging
heroku open --app haypista-production

Done

Celebrate! You now have two servers running on Heroku with different databases and accessible through domains. Seriously, how long did that take?
Caveats

The heroku command seems to detect the application name by looking through git's remotes for remotes that are located at heroku.com. This means it will get confused by the multiple entries we created. You will need to work around this by passing --app myapp-staging after the normal heroku command.
Troubleshooting

Make sure you followed my original guide on getting your application deployed to Heroku.
Related Posts

    * 05 Aug 2009 » iPhone Toggle Switches
    * 24 Apr 2009 » Deploy Your Rails Application in 2 Minutes with Heroku
    * 02 Mar 2009 » Use Instant Debugger on Rare Exceptions

Add New Comment

You are commenting as a Guest. Optional: Login below.

*

	
	
Subscribe to all comments by email ▼

    * Subscribe to all comments by email
    * Do not subscribe to comments

Sharing options ▼
Configure options
Post as Guest
Showing 14 comments
Sort by   Unsubscribe Subscribe by RSS

    *
      	james@heroku [Moderator] 5 months ago 	1 person liked this.
      Thanks for the awesome write-up! FYI, you can name git remotes when you create an app like this:

      $ heroku create myapp-staging --remote staging
      Flag
      Like Reply Reply
    *
      	jqr [Moderator] 5 months ago in reply to james@heroku 	
      Awesome I missed that somehow! Guide updated.
      Flag
      Like Reply Reply
    *
      	Thomas Balthazar [Moderator] 4 months ago 	
      Hi,

      Great post, thanks.
      You explain how to deploy code from your master branch to a prod and a staging heroku app.

      Here is my situation :
      I have a master branch and a staging branch on Github.

      I can push my master branch on Github like this :
      git push origin master

      And I can push it on Heroku like this :
      git push production master

      I can push my staging branch on Github like this :
      git push origin staging

      My question :
      But how can I push my staging branch to the Heroku staging app *master* branch?
      git push staging staging
      would create a 'staging' branch on Heroku staging repository.

      Do you have any idea how I can achieve that?

      Best,
      Thomas.
      Flag
      Like Reply Reply
    *
      	Thomas Balthazar [Moderator] 4 months ago in reply to Thomas Balthazar 	
      I guess I found the answer :
      1/ git fetch staging
      2/ git checkout -b heroku-staging staging/master

      -> I now have a heroku-staging branch that is linked to the heroku staging app's master branch.
      Flag
      Like Reply Reply
    *
      	jqr [Moderator] 4 months ago in reply to Thomas Balthazar 	
      It would really be best if we could use Heroku as a remote branch only. Managing local branches to track remote Heroku branches seems to make it unnecessarily more complicated. There is probably some way to manipulate git to handle this case better but a simple shell script should work well enough or now.
      Flag
      Like Reply Reply
    *
      	danhixon [Moderator] 2 months ago 	
      Way cool! Thanks for the excellent write up!
      Flag
      Like Reply Reply
    *
      	timharvey [Moderator] 1 month ago 	
      Thanks Eli. I ran across this via GitHub (which somewhat unhelpfully took me to the repo for this entry), then after reading through it all, realized who wrote it. Heroku FTW!

      Thanks for the write-up. Just what I needed this evening.
      Flag
      Like Reply Reply
    *
      	Aaron Broad [Moderator] 1 month ago 	
      How do I merge staging with production once I'm satisfied its running?
      Flag
      Like Reply Reply
    *
      	jqr [Moderator] 1 month ago in reply to Aaron Broad 	
      Deploying non-master branches to heroku involves a slightly more complex command, but this is how I do it.

      # in production branch. staging was good, so we merge it.
      git merge staging

      # now we push to our production application(remote) with our production branch to its master branch
      # git push <remote> <source>:<destination>
      git push production production:master
      Flag
      Like Reply Reply
    *
      	Aaron Broad [Moderator] 1 month ago in reply to jqr 	
      okay, so thats what I originally thought of doing.. but git merge staging says:

      projectserver:myjudoka-production aaron$ git merge staging
      fatal: 'staging' does not point to a commit


      What am i doing wrong, and why have I only been able to do it, the way i describe below. Thanks again for the speedy response
      Flag
      Like Reply Reply
    *
      	jqr [Moderator] 1 month ago in reply to Aaron Broad 	
      I was referring to my staging branch as simply "staging" because I have a local branch that tracks my remote staging branch. You seem to to be using git@heroku.com:myjudoka-staging.git instead, give that a try.
      Flag
      Like Reply Reply
    *
      	Aaron Broad [Moderator] 1 month ago in reply to jqr 	
      Sorry, I'm a total git noob. How would I had a branch that tracks it like you have. A simple replacing of staging with git@heroku.com:myjudoka-staging.git does not work:

      projectserver:myjudoka-production aaron$ git merge git@heroku.com:myjudoka-staging.git
      fatal: 'git@heroku.com:myjudoka-staging.git' does not point to a commit
      projectserver:myjudoka-production aaron$
      Flag
      Like Reply Reply
    *
      	Aaron Broad [Moderator] 1 month ago in reply to Aaron Broad 	
      OK, figured it out... except I end up having to git fetch staging, git merge staging/master... i can live with that;-)
      Flag
      Like Reply Reply
    *
      	Aaron Broad [Moderator] 1 month ago in reply to Aaron Broad 	
      OK, answered my own question. But please let me know if there is a better way.

      I first added production as a remote to staging, fetched its latest, and merged it using the ours strategy. Thus letting git know this is production but keep all the changes I have in staging.

      I then switched over to my production copy and added staging as a remote, fetched the latest, and merged using the default strategy.

      cd ../myjudoka-staging/
      git fetch git@heroku.com:myjudoka-production.git +
      git merge --strategy Ours FETCH_HEAD HEAD
      cd ../myjudoka-production/
      git fetch git@heroku.com:myjudoka-staging.git +
      git merge HEAD FETCH_HEAD
