be9 / acl9  
Description:	Yet another role-based authorization system for Rails
Clone URL:	git://github.com/be9/acl9.git 

http://github.com/be9/acl9/blob/5b8352fa70ae0fae525e48a5a124f7084e6fac92/README.textile


  class VerySecretController < ApplicationController
    access_control do
      allow :superadmin
      allow :owner, :of => :secret

      action :index do
        allow anonymous, logged_in
      end

      allow logged_in, :to => :show
      allow :manager, :of => :secret, :except => [:delete, :destroy]
      deny :thiefs
    end

    def index
      # ...
    end

    # ...
  end
  
  
  subject.has_role?(role, object)
  
  class Foo < ActiveRecord::Base
    acts_as_authorization_object
  end
  
  
  Subject model
	A call of acts_as_authorization_subject defines following methods on the model:

	subject.has_role?(role, object = nil). Returns true of false (has or has not).

	subject.has_role!(role, object = nil). Assigns a role for the object to the subject. 
	Does nothing is subject already has such a role.

	subject.has_no_role!(role, object = nil). Unassigns a role from the subject.

	subject.has_roles_for?(object). Does the subject has any roles for object? (true of false)

	subject.has_role_for?(object). Same as has_roles_for?.

	subject.roles_for(object). Returns an array of Role instances, corresponding to subject ’s roles on
	object. E.g. subject.roles_for(object).map(&:name).sort will give you role names in alphabetical order.

	subject.has_no_roles_for!(object). Unassign any subject ’s roles for a given object.

	subject.has_no_roles!. Unassign all roles from subject.


	Object model
	A call of acts_as_authorization_object defines following methods on the model:

	object.accepts_role?(role_name, subject). An alias for subject.has_role?(role_name, object).

	object.accepts_role!(role_name, subject). An alias for subject.has_role!(role_name, object).

	object.accepts_no_role!(role_name, subject). An alias for subject.has_no_role!(role_name, object).

	object.accepts_roles_by?(subject). An alias for subject.has_roles_for?(object).

	object.accepts_role_by?(subject). Same as accepts_roles_by?.

	object.accepts_roles_by(subject). An alias for subject.roles_for(object).



Examples

  user = User.create!
  user.has_role? 'admin'              # => false
  
  # create and admin role for user
  user.has_role! :admin

  # valudate admin role for user
  user.has_role? :admin               # => true
  
  
  user now has global role admin. Note that you can specify role name either
as a string or as a symbol.


  foo = Foo.create!

  user.has_role? 'admin', foo         # => false

  user.has_role! :manager, foo
  
  user.has_role? :manager, foo        # => true
  foo.accepts_role? :manager, user    # => true
  
  user.has_roles_for? foo             # => true
You can see here that global and object roles are distinguished from each other. User
with global role admin isn’t automatically admin of foo.

However,


  user.has_role? :manager             # => true
That is, if you have an object role, it means that you have a global role with the same name too!
In other words, you are manager if you manage at least one foo (or a bar…).


  bar = Bar.create!

  user.has_role! :manager, bar
  user.has_no_role! :manager, foo

  user.has_role? :manager, foo        # => false
  user.has_role? :manager             # => true
Our user is no more manager of foo, but has become a manager of bar.


  user.has_no_roles!

  user.has_role? :manager             # => false
  user.has_role? :admin               # => false
  user.roles                          # => []
  
  
  
  
  
  
  
  
